/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { Example } from "../Example";

export class Example__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<Example> {
    return super.deploy(overrides || {}) as Promise<Example>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Example {
    return super.attach(address) as Example;
  }
  connect(signer: Signer): Example__factory {
    return super.connect(signer) as Example__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Example {
    return new Contract(address, _abi, signerOrProvider) as Example;
  }
}

const _abi = [
  {
    inputs: [],
    name: "age",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "career",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x603260005560c06040526005608081905264546169776f60d81b60a090815261002b9160019190610077565b506040805180820190915260118082527029b7b33a3bb0b9329022b733b4b732b2b960791b602090920191825261006491600291610077565b5034801561007157600080fd5b5061014b565b82805461008390610110565b90600052602060002090601f0160209004810192826100a557600085556100eb565b82601f106100be57805160ff19168380011785556100eb565b828001600101855582156100eb579182015b828111156100eb5782518255916020019190600101906100d0565b506100f79291506100fb565b5090565b5b808211156100f757600081556001016100fc565b600181811c9082168061012457607f821691505b6020821081141561014557634e487b7160e01b600052602260045260246000fd5b50919050565b6101e48061015a6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806306fdde0314610046578063262a9dff1461006457806370b41d231461007b575b600080fd5b61004e610083565b60405161005b919061011e565b60405180910390f35b61006d60005481565b60405190815260200161005b565b61004e610111565b6001805461009090610173565b80601f01602080910402602001604051908101604052809291908181526020018280546100bc90610173565b80156101095780601f106100de57610100808354040283529160200191610109565b820191906000526020600020905b8154815290600101906020018083116100ec57829003601f168201915b505050505081565b6002805461009090610173565b600060208083528351808285015260005b8181101561014b5785810183015185820160400152820161012f565b8181111561015d576000604083870101525b50601f01601f1916929092016040019392505050565b600181811c9082168061018757607f821691505b602082108114156101a857634e487b7160e01b600052602260045260246000fd5b5091905056fea26469706673582212201dfe3f8d6ec87154aa0f091562a80bf3e6518d2d9e1bd61e8accbb6caad7b8ed64736f6c634300080c0033";
