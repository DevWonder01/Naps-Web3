/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { Example } from "../Example";

export class Example__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<Example> {
    return super.deploy(overrides || {}) as Promise<Example>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Example {
    return super.attach(address) as Example;
  }
  connect(signer: Signer): Example__factory {
    return super.connect(signer) as Example__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Example {
    return new Contract(address, _abi, signerOrProvider) as Example;
  }
}

const _abi = [
  {
    inputs: [],
    name: "age",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "a",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "b",
        type: "int256",
      },
    ],
    name: "sumOf2Numbers",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x60326000556019600155602860025560c06040526005608081905264546169776f60d81b60a09081526100359160039190610055565b506004805460ff1916600117905534801561004f57600080fd5b50610129565b828054610061906100ee565b90600052602060002090601f01602090048101928261008357600085556100c9565b82601f1061009c57805160ff19168380011785556100c9565b828001600101855582156100c9579182015b828111156100c95782518255916020019190600101906100ae565b506100d59291506100d9565b5090565b5b808211156100d557600081556001016100da565b600181811c9082168061010257607f821691505b6020821081141561012357634e487b7160e01b600052602260045260246000fd5b50919050565b610117806101386000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c8063262a9dff146037578063c6d4665d146051575b600080fd5b603f60005481565b60405190815260200160405180910390f35b603f605c366004606f565b6000806067838560a6565b949350505050565b60008060408385031215608157600080fd5b50508035926020909101359150565b634e487b7160e01b600052601160045260246000fd5b600080821280156001600160ff1b038490038513161560c55760c56090565b600160ff1b839003841281161560db5760db6090565b5050019056fea2646970667358221220454309e4a894f0ee78ad1e691e7590de57ca53fae4acfdb540a6e0c1cd46da4764736f6c634300080c0033";
