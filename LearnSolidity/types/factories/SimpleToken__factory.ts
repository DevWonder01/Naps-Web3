/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, BigNumberish } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { SimpleToken } from "../SimpleToken";

export class SimpleToken__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _totalSupply: BigNumberish,
    overrides?: Overrides
  ): Promise<SimpleToken> {
    return super.deploy(_totalSupply, overrides || {}) as Promise<SimpleToken>;
  }
  getDeployTransaction(
    _totalSupply: BigNumberish,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(_totalSupply, overrides || {});
  }
  attach(address: string): SimpleToken {
    return super.attach(address) as SimpleToken;
  }
  connect(signer: Signer): SimpleToken__factory {
    return super.connect(signer) as SimpleToken__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SimpleToken {
    return new Contract(address, _abi, signerOrProvider) as SimpleToken;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_totalSupply",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60c0604052600b60808190526a29b4b6b83632aa37b5b2b760a91b60a090815261002c91600291906100a9565b506040805180820190915260028082526114d560f21b6020909201918252610056916003916100a9565b506004805460ff1916601217905534801561007057600080fd5b506040516105df3803806105df83398101604081905261008f91610142565b600181905533600090815260208190526040902055610196565b8280546100b59061015b565b90600052602060002090601f0160209004810192826100d7576000855561011d565b82601f106100f057805160ff191683800117855561011d565b8280016001018555821561011d579182015b8281111561011d578251825591602001919060010190610102565b5061012992915061012d565b5090565b5b80821115610129576000815560010161012e565b60006020828403121561015457600080fd5b5051919050565b600181811c9082168061016f57607f821691505b6020821081141561019057634e487b7160e01b600052602260045260246000fd5b50919050565b61043a806101a56000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063313ce5671161005b578063313ce567146100d757806370a08231146100f657806395d89b411461011f578063a9059cbb1461012757600080fd5b806306fdde031461008257806318160ddd146100a057806327e235e3146100b7575b600080fd5b61008a61013c565b60405161009791906102c7565b60405180910390f35b6100a960015481565b604051908152602001610097565b6100a96100c5366004610338565b60006020819052908152604090205481565b6004546100e49060ff1681565b60405160ff9091168152602001610097565b6100a9610104366004610338565b6001600160a01b031660009081526020819052604090205490565b61008a6101ca565b61013a61013536600461035a565b6101d7565b005b6002805461014990610384565b80601f016020809104026020016040519081016040528092919081815260200182805461017590610384565b80156101c25780601f10610197576101008083540402835291602001916101c2565b820191906000526020600020905b8154815290600101906020018083116101a557829003601f168201915b505050505081565b6003805461014990610384565b336000908152602081905260409020548111156102325760405162461bcd60e51b815260206004820152601560248201527424b739bab33334b1b4b2b73a103130b630b731b29760591b604482015260640160405180910390fd5b33600090815260208190526040812080548392906102519084906103d5565b90915550506001600160a01b0382166000908152602081905260408120805483929061027e9084906103ec565b90915550506040518181526001600160a01b0383169033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600060208083528351808285015260005b818110156102f4578581018301518582016040015282016102d8565b81811115610306576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461033357600080fd5b919050565b60006020828403121561034a57600080fd5b6103538261031c565b9392505050565b6000806040838503121561036d57600080fd5b6103768361031c565b946020939093013593505050565b600181811c9082168061039857607f821691505b602082108114156103b957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6000828210156103e7576103e76103bf565b500390565b600082198211156103ff576103ff6103bf565b50019056fea2646970667358221220ae0c23a8f9f77ffcb496eb2267dd872741955d712bb039e08f5ecff140bcb0e864736f6c634300080c0033";
