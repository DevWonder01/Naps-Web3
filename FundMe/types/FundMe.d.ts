/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface FundMeInterface extends ethers.utils.Interface {
  functions: {
    "fund()": FunctionFragment;
    "getMyDonation(address)": FunctionFragment;
    "getRemainingTime()": FunctionFragment;
    "i_owner()": FunctionFragment;
    "requestRefund()": FunctionFragment;
    "s_deadline()": FunctionFragment;
    "s_donations(address)": FunctionFragment;
    "s_fundsClaimed()": FunctionFragment;
    "s_goalAmount()": FunctionFragment;
    "s_goalReached()": FunctionFragment;
    "s_totalFundsRaised()": FunctionFragment;
    "withdrawFunds()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "fund", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getMyDonation",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRemainingTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "i_owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "requestRefund",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_deadline",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "s_donations", values: [string]): string;
  encodeFunctionData(
    functionFragment: "s_fundsClaimed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_goalAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_goalReached",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_totalFundsRaised",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "fund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMyDonation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRemainingTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "i_owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "s_deadline", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "s_donations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_fundsClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_goalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_goalReached",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_totalFundsRaised",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;

  events: {
    "CampaignEnded()": EventFragment;
    "FundReceived(address,uint256,uint256)": EventFragment;
    "FundsWithdrawn(address,uint256)": EventFragment;
    "GoalReached(uint256)": EventFragment;
    "RefundIssued(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CampaignEnded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GoalReached"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RefundIssued"): EventFragment;
}

export class FundMe extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: FundMeInterface;

  functions: {
    fund(overrides?: PayableOverrides): Promise<ContractTransaction>;

    "fund()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

    getMyDonation(
      _donor: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getMyDonation(address)"(
      _donor: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRemainingTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getRemainingTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    i_owner(overrides?: CallOverrides): Promise<[string]>;

    "i_owner()"(overrides?: CallOverrides): Promise<[string]>;

    requestRefund(overrides?: Overrides): Promise<ContractTransaction>;

    "requestRefund()"(overrides?: Overrides): Promise<ContractTransaction>;

    s_deadline(overrides?: CallOverrides): Promise<[BigNumber]>;

    "s_deadline()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    s_donations(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "s_donations(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    s_fundsClaimed(overrides?: CallOverrides): Promise<[boolean]>;

    "s_fundsClaimed()"(overrides?: CallOverrides): Promise<[boolean]>;

    s_goalAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "s_goalAmount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    s_goalReached(overrides?: CallOverrides): Promise<[boolean]>;

    "s_goalReached()"(overrides?: CallOverrides): Promise<[boolean]>;

    s_totalFundsRaised(overrides?: CallOverrides): Promise<[BigNumber]>;

    "s_totalFundsRaised()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawFunds(overrides?: Overrides): Promise<ContractTransaction>;

    "withdrawFunds()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  fund(overrides?: PayableOverrides): Promise<ContractTransaction>;

  "fund()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

  getMyDonation(_donor: string, overrides?: CallOverrides): Promise<BigNumber>;

  "getMyDonation(address)"(
    _donor: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRemainingTime(overrides?: CallOverrides): Promise<BigNumber>;

  "getRemainingTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  i_owner(overrides?: CallOverrides): Promise<string>;

  "i_owner()"(overrides?: CallOverrides): Promise<string>;

  requestRefund(overrides?: Overrides): Promise<ContractTransaction>;

  "requestRefund()"(overrides?: Overrides): Promise<ContractTransaction>;

  s_deadline(overrides?: CallOverrides): Promise<BigNumber>;

  "s_deadline()"(overrides?: CallOverrides): Promise<BigNumber>;

  s_donations(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "s_donations(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  s_fundsClaimed(overrides?: CallOverrides): Promise<boolean>;

  "s_fundsClaimed()"(overrides?: CallOverrides): Promise<boolean>;

  s_goalAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "s_goalAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  s_goalReached(overrides?: CallOverrides): Promise<boolean>;

  "s_goalReached()"(overrides?: CallOverrides): Promise<boolean>;

  s_totalFundsRaised(overrides?: CallOverrides): Promise<BigNumber>;

  "s_totalFundsRaised()"(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawFunds(overrides?: Overrides): Promise<ContractTransaction>;

  "withdrawFunds()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    fund(overrides?: CallOverrides): Promise<void>;

    "fund()"(overrides?: CallOverrides): Promise<void>;

    getMyDonation(
      _donor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMyDonation(address)"(
      _donor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRemainingTime(overrides?: CallOverrides): Promise<BigNumber>;

    "getRemainingTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    i_owner(overrides?: CallOverrides): Promise<string>;

    "i_owner()"(overrides?: CallOverrides): Promise<string>;

    requestRefund(overrides?: CallOverrides): Promise<void>;

    "requestRefund()"(overrides?: CallOverrides): Promise<void>;

    s_deadline(overrides?: CallOverrides): Promise<BigNumber>;

    "s_deadline()"(overrides?: CallOverrides): Promise<BigNumber>;

    s_donations(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "s_donations(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    s_fundsClaimed(overrides?: CallOverrides): Promise<boolean>;

    "s_fundsClaimed()"(overrides?: CallOverrides): Promise<boolean>;

    s_goalAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "s_goalAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    s_goalReached(overrides?: CallOverrides): Promise<boolean>;

    "s_goalReached()"(overrides?: CallOverrides): Promise<boolean>;

    s_totalFundsRaised(overrides?: CallOverrides): Promise<BigNumber>;

    "s_totalFundsRaised()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFunds(overrides?: CallOverrides): Promise<void>;

    "withdrawFunds()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    CampaignEnded(): EventFilter;

    FundReceived(
      donor: string | null,
      amount: null,
      newTotal: null
    ): EventFilter;

    FundsWithdrawn(recipient: string | null, amount: null): EventFilter;

    GoalReached(totalFunds: null): EventFilter;

    RefundIssued(donor: string | null, amount: null): EventFilter;
  };

  estimateGas: {
    fund(overrides?: PayableOverrides): Promise<BigNumber>;

    "fund()"(overrides?: PayableOverrides): Promise<BigNumber>;

    getMyDonation(
      _donor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMyDonation(address)"(
      _donor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRemainingTime(overrides?: CallOverrides): Promise<BigNumber>;

    "getRemainingTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    i_owner(overrides?: CallOverrides): Promise<BigNumber>;

    "i_owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    requestRefund(overrides?: Overrides): Promise<BigNumber>;

    "requestRefund()"(overrides?: Overrides): Promise<BigNumber>;

    s_deadline(overrides?: CallOverrides): Promise<BigNumber>;

    "s_deadline()"(overrides?: CallOverrides): Promise<BigNumber>;

    s_donations(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "s_donations(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    s_fundsClaimed(overrides?: CallOverrides): Promise<BigNumber>;

    "s_fundsClaimed()"(overrides?: CallOverrides): Promise<BigNumber>;

    s_goalAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "s_goalAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    s_goalReached(overrides?: CallOverrides): Promise<BigNumber>;

    "s_goalReached()"(overrides?: CallOverrides): Promise<BigNumber>;

    s_totalFundsRaised(overrides?: CallOverrides): Promise<BigNumber>;

    "s_totalFundsRaised()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFunds(overrides?: Overrides): Promise<BigNumber>;

    "withdrawFunds()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    fund(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    "fund()"(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    getMyDonation(
      _donor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMyDonation(address)"(
      _donor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRemainingTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getRemainingTime()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    i_owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "i_owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requestRefund(overrides?: Overrides): Promise<PopulatedTransaction>;

    "requestRefund()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    s_deadline(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "s_deadline()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    s_donations(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "s_donations(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    s_fundsClaimed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "s_fundsClaimed()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    s_goalAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "s_goalAmount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    s_goalReached(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "s_goalReached()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    s_totalFundsRaised(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "s_totalFundsRaised()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawFunds(overrides?: Overrides): Promise<PopulatedTransaction>;

    "withdrawFunds()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
